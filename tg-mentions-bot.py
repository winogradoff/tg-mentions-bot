import logging
from typing import List, Dict, Iterable

import aiogram.types as types
from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import filters
from aiogram.dispatcher.filters import Filter
from aiogram.types import ParseMode, MessageEntityType, ChatMember, ChatType, InlineKeyboardButton, \
    InlineKeyboardMarkup, BotCommand
from aiogram.utils import markdown as md, executor
from aiogram.utils.exceptions import MessageNotModified
from aiogram.utils.executor import start_webhook
from aiogram.utils.text_decorations import markdown_decoration as md_style

import constraints
import database as db
import settings
from models import Grant, GroupAlias, Member, AuthorizationError, IllegalStateError, CallbackData, CallbackType

logging.basicConfig(
    format=u'%(filename)+13s [ LINE:%(lineno)-4s] %(levelname)-8s [%(asctime)s] %(message)s',
    level=logging.DEBUG
)

COMMON_COMMANDS = {
    'help': '—Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞',
    'groups': '–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø',
    'members': '–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ',
    'call': '–ø–æ–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    'xcall': '–ø–æ–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (inline-–¥–∏–∞–ª–æ–≥)'
}

ADMIN_COMMANDS = {
    'add_group': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã',
    'remove_group': '—É–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã',
    'add_alias': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞ –≥—Ä—É–ø–ø—ã',
    'remove_alias': '—É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞ –≥—Ä—É–ø–ø—ã',
    'add_members': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É',
    'remove_members': '—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã',
    'enable_anarchy': '–≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
    'disable_anarchy': '—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
}

bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


def custom_filters(
        commands: Iterable[str],
        is_forwarded: bool = False
) -> Iterable[Filter]:
    return [
        filters.Command(commands=commands),
        filters.ForwardedMessageFilter(is_forwarded=is_forwarded)
    ]


@dp.message_handler(*custom_filters(commands=['start', 'help']))
async def handler_help(message: types.Message):
    await check_access(message, grant=Grant.READ_ACCESS)

    def prepare_commands(commands: Dict[str, str]) -> List[str]:
        return [
            md.text(md.escape_md(f"/{x[0]}"), "‚Äî", x[1])
            for x in commands.items()
        ]

    await message.reply(
        text=md.text(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.get_mention()}! üëã",
            "",
            md_style.bold("–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:"),
            md_style.code("/add_group group1"),
            md_style.code("/add_members group1 @user1 @user2 @user3"),
            md_style.code("/call group1"),
            "",
            md.text(
                "–ö–æ–º–∞–Ω–¥–∞", md_style.italic("call"),
                "–≤—ã–∑–æ–≤–µ—Ç —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥—Ä—É–ø–ø—ã", md_style.italic("group1"),
                "–≤–æ—Ç –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:"
            ),
            md_style.code("@user1 @user2 @user3"),
            "",
            md_style.bold("–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:"),
            *prepare_commands(COMMON_COMMANDS),
            "",
            md_style.bold("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"),
            *prepare_commands(ADMIN_COMMANDS),
            sep='\n'
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(*custom_filters(commands=['groups']))
async def handler_list_groups(message: types.Message):
    await check_access(message, grant=Grant.READ_ACCESS)

    with db.get_connection() as conn:
        aliases: List[GroupAlias] = db.select_group_aliases_by_chat_id(conn, chat_id=message.chat.id)
        if len(aliases) == 0:
            return await message.reply("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.", parse_mode=ParseMode.MARKDOWN)

        aliases_lookup: Dict[int, List[GroupAlias]] = {}
        for a in aliases:
            aliases_lookup.setdefault(a.group_id, []).append(a)

    groups_for_print = []
    for group_id in sorted({x.group_id for x in aliases}):
        group_aliases = sorted(aliases_lookup.get(group_id, []), key=lambda x: x.alias_id)
        group_aliases = [x.alias_name for x in group_aliases]
        head, *tail = group_aliases
        tail = f" (—Å–∏–Ω–æ–Ω–∏–º—ã: {', '.join(tail)})" if len(tail) > 0 else ""
        groups_for_print.append(f"- {head}{tail}")

    await message.reply(
        md.text(
            md_style.bold("–í–æ—Ç —Ç–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç:"),
            md_style.code("\n".join(groups_for_print)),
            sep='\n'
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(*custom_filters(commands=['add_group']))
async def handler_add_group(message: types.Message):
    await check_access(message, Grant.WRITE_ACCESS)
    match = constraints.REGEX_CMD_GROUP.search(message.text)
    if not match:
        return await message.reply(
            md.text(
                md_style.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                md_style.code("/add_group group"),
                " ",
                md_style.bold("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"),
                md.text("group:", constraints.MESSAGE_FOR_GROUP),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_name = match.group("group")

    if len(group_name) > constraints.MAX_GROUP_NAME_LENGTH:
        return await message.reply('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!')

    with db.get_connection() as conn:
        db.insert_chat(
            conn,
            chat_id=message.chat.id,
            chat_title=message.chat.title,
            chat_username=message.chat.username
        )
        db.select_chat_for_update(conn, chat_id=message.chat.id)

        existing_groups: List[GroupAlias] = db.select_group_aliases_by_chat_id(conn, chat_id=message.chat.id)

        if group_name in {x.alias_name for x in existing_groups}:
            return await message.reply('–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')

        if len({x.group_id for x in existing_groups}) >= constraints.MAX_GROUPS_PER_CHAT:
            return await message.reply(
                f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥—Ä—É–ø–ø —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ!'
                f' –¢–µ–∫—É—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞: {constraints.MAX_GROUPS_PER_CHAT}'
            )

        group_id = db.insert_group(conn, chat_id=message.chat.id)
        db.insert_group_alias(
            conn,
            chat_id=message.chat.id,
            group_id=group_id,
            alias_name=group_name
        )

    await message.reply(
        md.text("–ì—Ä—É–ø–ø–∞", md_style.code(group_name), "–¥–æ–±–∞–≤–ª–µ–Ω–∞!"),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(*custom_filters(commands=['remove_group']))
async def handler_remove_group(message: types.Message):
    await check_access(message, Grant.WRITE_ACCESS)
    match = constraints.REGEX_CMD_GROUP.search(message.text)
    if not match:
        return await message.reply(
            md.text(
                md_style.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                md_style.code("/remove_group group"),
                " ",
                md_style.bold("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"),
                md.text("group:", constraints.MESSAGE_FOR_GROUP),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_name = match.group("group")

    with db.get_connection() as conn:
        db.select_chat_for_update(conn, chat_id=message.chat.id)
        group = db.select_group_by_alias_name(conn, chat_id=message.chat.id, alias_name=group_name)
        if not group:
            return await message.reply(
                md.text('–ì—Ä—É–ø–ø–∞', md_style.code(group_name), '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'),
                parse_mode=ParseMode.MARKDOWN
            )
        logging.info(f"group: {group}")
        members = db.select_members(conn, group.group_id)
        if len(members) != 0:
            logging.info(f"members: {members}")
            return await message.reply('–ì—Ä—É–ø–ø—É –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –≤ –Ω–µ–π –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!')

        group_aliases = db.select_group_aliases_by_group_id(conn, group_id=group.group_id)

        for a in group_aliases:
            db.delete_group_alias(conn, alias_id=a.alias_id)

        db.delete_group(conn, group_id=group.group_id)

    await message.reply(
        md.text("–ì—Ä—É–ø–ø–∞", md_style.bold(group_name), "—É–¥–∞–ª–µ–Ω–∞!"),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(*custom_filters(commands=['add_group_alias', 'add_alias']))
async def handler_add_group_alias(message: types.Message):
    await check_access(message, Grant.WRITE_ACCESS)
    match = constraints.REGEX_CMD_GROUP_ALIAS.search(message.text)
    if not match:
        return await message.reply(
            md.text(
                md_style.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                md_style.code("/add_alias group alias"),
                " ",
                md_style.bold("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"),
                md.text("group:", constraints.MESSAGE_FOR_GROUP),
                md.text("alias:", constraints.MESSAGE_FOR_GROUP),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_name = match.group('group')
    group_alias = match.group('alias')

    if len(group_alias) > constraints.MAX_GROUP_NAME_LENGTH:
        return await message.reply('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!')

    with db.get_connection() as conn:
        db.select_chat_for_update(conn, chat_id=message.chat.id)
        group = db.select_group_by_alias_name(conn, chat_id=message.chat.id, alias_name=group_name)
        if not group:
            return await message.reply(
                md.text('–ì—Ä—É–ø–ø–∞', md_style.code(group_name), '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'),
                parse_mode=ParseMode.MARKDOWN
            )
        logging.info(f"group: {group}")

        aliases: List[GroupAlias] = db.select_group_aliases_by_chat_id(conn, chat_id=message.chat.id)

        if group_alias in set(x.alias_name for x in aliases):
            return await message.reply("–¢–∞–∫–æ–π –∞–ª–∏–∞—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")

        if len([x for x in aliases if x.group_id == group.group_id]) >= constraints.MAX_ALIASES_PER_GROUP:
            return await message.reply(
                f"–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–∫ –º–Ω–æ–≥–æ –∞–ª–∏–∞—Å–æ–≤!"
                f" –¢–µ–∫—É—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã: {constraints.MAX_ALIASES_PER_GROUP}"
            )

        db.insert_group_alias(
            conn,
            chat_id=message.chat.id,
            group_id=group.group_id,
            alias_name=group_alias
        )

    await message.reply(
        md.text(
            "–î–ª—è –≥—Ä—É–ø–ø—ã", md_style.code(group_name),
            "–¥–æ–±–∞–≤–ª–µ–Ω –∞–ª–∏–∞—Å", md_style.code(group_alias)
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(*custom_filters(commands=['remove_group_alias', 'remove_alias']))
async def handler_remove_group_alias(message: types.Message):
    await check_access(message, Grant.WRITE_ACCESS)
    match = constraints.REGEX_CMD_GROUP_ALIAS.search(message.text)
    if not match:
        return await message.reply(
            md.text(
                md_style.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                md_style.code("/remove_alias group alias"),
                " ",
                md_style.bold("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"),
                md.text("group:", constraints.MESSAGE_FOR_GROUP),
                md.text("alias:", constraints.MESSAGE_FOR_GROUP),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_name = match.group('group')
    alias_name = match.group('alias')

    with db.get_connection() as conn:
        db.select_chat_for_update(conn, chat_id=message.chat.id)
        group = db.select_group_by_alias_name(conn, chat_id=message.chat.id, alias_name=group_name)
        if not group:
            return await message.reply(
                md.text('–ì—Ä—É–ø–ø–∞', md_style.code(group_name), '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'),
                parse_mode=ParseMode.MARKDOWN
            )
        logging.info(f"group: {group}")

        group_aliases: Dict[str, GroupAlias] = {
            x.alias_name: x
            for x in db.select_group_aliases_by_group_id(conn, group_id=group.group_id)
        }

        if alias_name not in group_aliases:
            return await message.reply(
                md.text(
                    '–ê–ª–∏–∞—Å', md_style.code(alias_name),
                    '–Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã', md_style.code(group_name)
                ),
                parse_mode=ParseMode.MARKDOWN
            )
        group_alias = group_aliases[alias_name]

        if len(group_aliases) == 1:
            return await message.reply(
                md.text("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!"),
                parse_mode=ParseMode.MARKDOWN
            )

        db.delete_group_alias(conn, alias_id=group_alias.alias_id)

    await message.reply(
        md.text(
            "–ê–ª–∏–∞—Å", md_style.code(alias_name),
            "—É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã", md_style.code(group_name)
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(*custom_filters(commands=['members']))
async def handler_list_members(message: types.Message):
    await check_access(message, grant=Grant.READ_ACCESS)
    match = constraints.REGEX_CMD_GROUP.search(message.text)
    if not match:
        return await message.reply(
            md.text(
                md_style.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                md_style.code("/members group"),
                " ",
                md_style.bold("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"),
                md.text("group:", constraints.MESSAGE_FOR_GROUP),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_name = match.group("group")

    with db.get_connection() as conn:
        group = db.select_group_by_alias_name(conn, chat_id=message.chat.id, alias_name=group_name)
        if not group:
            return await message.reply(
                md.text('–ì—Ä—É–ø–ø–∞', md_style.code(group_name), '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'),
                parse_mode=ParseMode.MARKDOWN
            )
        members = db.select_members(conn, group_id=group.group_id)

    members = sorted(convert_members_to_names(members))
    logging.info(f"members: {members}")

    if len(members) == 0:
        text = md.text(
            "–í –≥—Ä—É–ø–ø–µ",
            md_style.code(group_name),
            "–Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
        )
    else:
        text = md.text(
            md.text(
                md_style.bold("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã"),
                md_style.code(group_name)
            ),
            md_style.code("\n".join([f"- {x}" for x in members])),
            sep='\n'
        )

    await message.reply(text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(*custom_filters(commands=['add_members', 'add_member']))
async def handler_add_members(message: types.Message):
    await check_access(message, Grant.WRITE_ACCESS)
    match = constraints.REGEX_CMD_GROUP_MEMBERS.search(message.text)
    if not match:
        return await message.reply(
            md.text(
                md_style.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                md_style.code("/add_members group username1 username2"),
                " ",
                md_style.bold("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"),
                md.text("group:", constraints.MESSAGE_FOR_GROUP),
                md.text("username:", constraints.MESSAGE_FOR_MEMBER),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_name = match.group('group')

    mentions = [
        Member(member_name=x.get_text(message.text))
        for x in message.entities
        if x.type == MessageEntityType.MENTION
    ]

    text_mentions = [
        Member(
            member_name=x.user.full_name,
            user_id=x.user.id
        )
        for x in message.entities
        if x.type == MessageEntityType.TEXT_MENTION
    ]

    all_members = mentions + text_mentions
    logging.info(f"members: {all_members}")

    if len(all_members) < 1:
        return await message.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')

    with db.get_connection() as conn:
        db.select_chat_for_update(conn, chat_id=message.chat.id)

        group = db.select_group_by_alias_name(conn, chat_id=message.chat.id, alias_name=group_name)
        if not group:
            return await message.reply(
                md.text('–ì—Ä—É–ø–ø–∞', md_style.code(group_name), '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'),
                parse_mode=ParseMode.MARKDOWN
            )
        logging.info(f"group: {group}")

        existing_members: List[Member] = db.select_members(conn, group_id=group.group_id)

        if len(existing_members) + len(all_members) > constraints.MAX_MEMBERS_PER_GROUP:
            return await message.reply(
                f'–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!'
                f' –¢–µ–∫—É—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã: {constraints.MAX_MEMBERS_PER_GROUP}'
            )

        for member in all_members:
            db.insert_member(conn, group_id=group.group_id, member=member)

    await message.reply(
        md.text(
            md.text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É",
                md_style.code(group_name),
            ),
            md_style.code("\n".join([
                f"- {x}" for x in convert_members_to_names(all_members)
            ])),
            sep='\n'
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(*custom_filters(commands=['remove_members', 'remove_member']))
async def handler_remove_members(message: types.Message):
    await check_access(message, Grant.WRITE_ACCESS)
    match = constraints.REGEX_CMD_GROUP_MEMBERS.search(message.text)
    if not match:
        return await message.reply(
            md.text(
                md_style.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                md_style.code("/remove_members group username1 username2"),
                " ",
                md_style.bold("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"),
                md.text("group:", constraints.MESSAGE_FOR_GROUP),
                md.text("username:", constraints.MESSAGE_FOR_MEMBER),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_name = match.group('group')

    with db.get_connection() as conn:
        db.select_chat_for_update(conn, chat_id=message.chat.id)

        group = db.select_group_by_alias_name(conn, chat_id=message.chat.id, alias_name=group_name)
        if not group:
            return await message.reply(
                md.text('–ì—Ä—É–ø–ø–∞', md_style.code(group_name), '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'),
                parse_mode=ParseMode.MARKDOWN
            )
        logging.info(f"group: {group}")

        mentions = [
            x.get_text(message.text)
            for x in message.entities
            if x.type == MessageEntityType.MENTION
        ]
        text_mentions = [
            f"[{x.user.full_name}]({x.user.url})"
            for x in message.entities
            if x.type == MessageEntityType.TEXT_MENTION
        ]
        all_members = mentions + text_mentions
        logging.info(f"members: {all_members}")

        if len(all_members) < 1:
            return await message.reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')

        for member in all_members:
            db.delete_member(conn, group_id=group.group_id, member_name=member)

    await message.reply(
        md.text(
            md.text(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏–∑ –≥—Ä—É–ø–ø—ã",
                md_style.code(group_name)
            ),
            md_style.code("\n".join([f"- {x}" for x in all_members])),
            sep='\n'
        ),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message_handler(*custom_filters(commands=["call"]))
async def handler_call(message: types.Message):
    await check_access(message, grant=Grant.READ_ACCESS)

    if constraints.REGEX_ONLY_CMD.search(message.text):
        await handler_xcall(message)
        return

    match = constraints.REGEX_CMD_GROUP_MESSAGE.search(message.text)
    if not match:
        return await message.reply(
            md.text(
                md_style.bold("–ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:"),
                md_style.code("/call group"),
                " ",
                md_style.bold("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"),
                md.text("group:", constraints.MESSAGE_FOR_GROUP),
                sep='\n'
            ),
            parse_mode=ParseMode.MARKDOWN
        )
    group_name = match.group("group")

    with db.get_connection() as conn:
        group = db.select_group_by_alias_name(conn, chat_id=message.chat.id, alias_name=group_name)
        if not group:
            return await message.reply(
                md.text('–ì—Ä—É–ø–ø–∞', md_style.code(group_name), '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'),
                parse_mode=ParseMode.MARKDOWN
            )
        logging.info(f"group: {group}")
        members = db.select_members(conn, group_id=group.group_id)

    if len(members) == 0:
        return await message.reply('–ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–∞!')

    mentions = convert_members_to_mentions(members)

    await message.reply(" ".join(mentions), parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(*custom_filters(commands=['xcall']))
async def handler_xcall(message: types.Message):
    await check_access(message, grant=Grant.READ_ACCESS)

    with db.get_connection() as conn:
        aliases: List[GroupAlias] = db.select_group_aliases_by_chat_id(conn, chat_id=message.chat.id)
        if len(aliases) == 0:
            return await message.reply("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.", parse_mode=ParseMode.MARKDOWN)

        aliases_lookup: Dict[int, List[GroupAlias]] = {}
        for a in aliases:
            aliases_lookup.setdefault(a.group_id, []).append(a)

    inline_keyboard = InlineKeyboardMarkup()

    inline_keyboard.add(
        InlineKeyboardButton(
            text="‚úñ –û—Ç–º–µ–Ω–∞ ‚úñ",
            callback_data=CallbackData(
                type=CallbackType.CANCEL,
                user_id=message.from_user.id
            ).serialize()
        )
    )

    groups_for_print = []
    for group_id in sorted({x.group_id for x in aliases}):
        group_aliases = sorted(aliases_lookup.get(group_id, []), key=lambda x: x.alias_id)
        group_aliases = [x.alias_name for x in group_aliases]
        head, *tail = group_aliases
        tail = f" (—Å–∏–Ω–æ–Ω–∏–º—ã: {', '.join(tail)})" if len(tail) > 0 else ""
        groups_for_print.append(f"{head}{tail}")

        inline_keyboard.add(
            InlineKeyboardButton(
                text=f"{head}{tail}",
                callback_data=CallbackData(
                    type=CallbackType.SELECT_GROUP,
                    user_id=message.from_user.id,
                    group_id=group_id
                ).serialize()
            )
        )

    await message.reply(
        md_style.bold("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É"),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=inline_keyboard
    )


@dp.callback_query_handler(lambda c: len(c.data) > 0)
async def process_callback_xcall(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    try:
        callback_data = CallbackData.deserialize(callback_query.data)
    except (KeyError, ValueError):
        logging.warning(f"Callback data deserialize error: data=[{callback_query.data}]", exc_info=True)
        await bot.answer_callback_query(
            callback_query_id=callback_query.id,
            text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!"
        )
        return await callback_query.message.delete()

    if callback_data.user_id != user_id:
        logging.warning(
            f"Wrong user:"
            f" user_id=[{user_id}],"
            f" callback_data={callback_data}"
        )
        return await bot.answer_callback_query(
            callback_query_id=callback_query.id,
            text="–≠—Ç–æ —á—É–∂–æ–π –¥–∏–∞–ª–æ–≥!",
            show_alert=True
        )

    if callback_data.type == CallbackType.CANCEL:
        await callback_query.message.delete()
        return await bot.answer_callback_query(
            callback_query_id=callback_query.id,
            text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!",
        )

    with db.get_connection() as conn:
        members = db.select_members(conn, group_id=callback_data.group_id)

    if len(members) == 0:
        return await bot.answer_callback_query(
            callback_query_id=callback_query.id,
            text="–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.",
            show_alert=True
        )

    await bot.answer_callback_query(callback_query.id)

    mentions = convert_members_to_mentions(members)
    await callback_query.message.edit_text(" ".join(mentions), parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(*custom_filters(commands=['enable_anarchy']))
async def handler_enable_anarchy(message: types.Message):
    await check_access(message, Grant.CHANGE_CHAT_SETTINGS)
    with db.get_connection() as conn:
        db.insert_chat(
            conn,
            chat_id=message.chat.id,
            chat_title=message.chat.title,
            chat_username=message.chat.username
        )
        db.set_chat_anarchy(conn, chat_id=message.chat.id, is_anarchy_enabled=True)
    await message.reply("–ê–Ω–∞—Ä—Ö–∏—è –≤–∫–ª—é—á–µ–Ω–∞. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞.")


@dp.message_handler(*custom_filters(commands=['disable_anarchy']))
async def handler_disable_anarchy(message: types.Message):
    await check_access(message, Grant.CHANGE_CHAT_SETTINGS)
    with db.get_connection() as conn:
        db.insert_chat(
            conn,
            chat_id=message.chat.id,
            chat_title=message.chat.title,
            chat_username=message.chat.username
        )
        db.set_chat_anarchy(conn, chat_id=message.chat.id, is_anarchy_enabled=False)
    await message.reply("–ê–Ω–∞—Ä—Ö–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞.")


@dp.errors_handler()
async def handler_error(update, error):
    if isinstance(error, MessageNotModified):
        return True
    elif isinstance(error, AuthorizationError):
        await update.message.reply("–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã.")
    else:
        logging.error("Unexpected error", error)
        if update.message:
            await update.message.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")


async def check_access(message: types.Message, grant: Grant):
    chat_id = message.chat.id
    user_id = message.from_user.id

    chat_member: ChatMember = await message.chat.get_member(user_id=user_id)

    logging.info(
        f"Request from chat member:"
        f" chat_id=[{chat_id}],"
        f" chat_type=[{message.chat.type}],"
        f" user_id=[{message.from_user.id}],"
        f" chat_member_status=[{chat_member.status}],"
        f" grant=[{grant}]"
    )

    is_private = ChatType.is_private(message)
    is_creator_or_admin = chat_member.is_chat_creator() or chat_member.is_chat_admin()

    if is_private:
        logging.info("No restrictions in private chat")
    elif is_creator_or_admin:
        logging.info("No restrictions for creator or admin")
    else:
        if grant == Grant.READ_ACCESS:
            logging.info("No restrictions for read access")
        elif grant == Grant.WRITE_ACCESS:
            with db.get_connection() as conn:
                chat = db.select_chat(conn, chat_id=chat_id)
            if not chat:
                raise AuthorizationError("Chat not found => anarchy is disabled by default")
            elif not chat.is_anarchy_enabled:
                raise AuthorizationError("Chat found, anarchy is disabled")
            else:
                logging.info("Anarchy enabled for chat")
        elif grant == Grant.CHANGE_CHAT_SETTINGS:
            raise AuthorizationError("Action allowed only for creator or admin")
        else:
            raise IllegalStateError(f"Unknown grant [{grant}]")


def convert_members_to_names(members: List[Member]) -> List[str]:
    return [x.member_name for x in members]


def convert_members_to_mentions(members: List[Member]) -> List[str]:
    result = []
    for member in members:
        if member.user_id is not None:
            result.append(
                md_style.link(
                    value=member.member_name,
                    link=f"tg://user?id={member.user_id}"
                )
            )
        else:
            result.append(md.escape_md(member.member_name))
    return result


async def bot_startup(_: Dispatcher):
    await bot.set_my_commands(
        [
            BotCommand(command=command, description=description)
            for command, description in {**COMMON_COMMANDS, **ADMIN_COMMANDS}.items()
        ]
    )
    if settings.WEBHOOK_ENABLED:
        await bot.set_webhook(settings.WEBHOOK_URL)


async def bot_shutdown(dispatcher: Dispatcher):
    await bot.delete_webhook()
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


def main():
    try:
        db.create_pool()
        with db.get_connection() as conn:
            db.create_schema(conn)

        if settings.WEBHOOK_ENABLED:
            start_webhook(
                dispatcher=dp,
                webhook_path=settings.WEBHOOK_PATH,
                skip_updates=True,
                on_startup=bot_startup,
                host=settings.WEBAPP_HOST,
                port=settings.WEBAPP_PORT,
            )
        else:
            executor.start_polling(dp, on_startup=bot_startup, on_shutdown=bot_shutdown)
    finally:
        db.close_pool()


if __name__ == '__main__':
    main()
